version: '3.8'

services:
  backend:
    # Instead of building, use a Python image directly
    image: python:3.9-slim
    container_name: backend
    volumes:
      - .:/app
    working_dir: /app
    command: sh -c "pip install -r requirements.txt && python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000"
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - postgres
    networks:
      - app_network

  airflow_scheduler:
    # Use image directly instead of building
    image: apache/airflow:2.7.1
    container_name: airflow_scheduler
    command: scheduler
    volumes:
      - ./backend/airflow/dags:/opt/airflow/dags
      - ./backend/airflow/plugins:/opt/airflow/plugins
      - ./requirements.txt:/requirements.txt
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
    depends_on:
      - postgres
    networks:
      - app_network

  airflow_webserver:
    # Use image directly instead of building
    image: apache/airflow:2.7.1
    container_name: airflow_webserver
    command: webserver
    volumes:
      - ./backend/airflow/dags:/opt/airflow/dags
      - ./backend/airflow/plugins:/opt/airflow/plugins
      - ./requirements.txt:/requirements.txt
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
    depends_on:
      - postgres
    networks:
      - app_network

  airflow_worker:
    # Use image directly instead of building
    image: apache/airflow:2.7.1
    container_name: airflow_worker
    command: celery worker
    volumes:
      - ./backend/airflow/dags:/opt/airflow/dags
      - ./backend/airflow/plugins:/opt/airflow/plugins
      - ./requirements.txt:/requirements.txt
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
    depends_on:
      - postgres
      - redis
    networks:
      - app_network

  mlflow:
    # Use Python image directly instead of building
    image: python:3.9-slim
    container_name: mlflow
    volumes:
      - .:/app
    working_dir: /app
    command: sh -c "pip install mlflow && mlflow server --host 0.0.0.0 --port 5001"
    ports:
      - "5001:5001"
    networks:
      - app_network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./backend/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./backend/monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./backend/monitoring/grafana/dashboards:/etc/grafana/dashboards
      - ./backend/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app_network

  postgres:
    image: postgres:13
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    networks:
      - app_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
