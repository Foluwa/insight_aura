version: '3.8'

services:
  backend:
    image: python:3.9-slim
    container_name: backend
    volumes:
      - .:/app
      - ./logs:/app/logs
    working_dir: /app
    command: sh -c "
      pip install --no-cache-dir -r requirements.txt && 
      python -c 'import asyncio; from backend.database.migration_runner import run_migrations; asyncio.run(run_migrations())' &&
      python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload
      "
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      # Add all necessary environment variables for scraping
      - PROXY_ENABLED=${PROXY_ENABLED:-false}
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Airflow Initialization Service
  airflow_init:
    image: apache/airflow:2.7.1
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # Install additional packages
        pip install --no-cache-dir -r /requirements.txt
        
        # Initialize Airflow database
        airflow db init
        
        # Create admin user
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin
        
        # Set up enterprise Airflow Variables
        airflow variables set ENVIRONMENT "${ENVIRONMENT:-production}"
        airflow variables set PROXY_ENABLED "${PROXY_ENABLED:-false}"
        airflow variables set HTTP_PROXY "${HTTP_PROXY:-}"
        airflow variables set HTTPS_PROXY "${HTTPS_PROXY:-}"
        airflow variables set TELEGRAM_ALERTS_ENABLED "${TELEGRAM_ALERTS_ENABLED:-false}"
        airflow variables set SLACK_ALERTS_ENABLED "${SLACK_ALERTS_ENABLED:-false}"
        airflow variables set SUCCESS_NOTIFICATIONS_ENABLED "true"
        airflow variables set SCRAPER_MAX_RETRIES "3"
        airflow variables set RATE_LIMIT_DELAY "1.5"
        airflow variables set SCRAPER_TIMEOUT "60"
        airflow variables set DATA_RETENTION_DAYS "90"
        airflow variables set REVIEW_RETENTION_DAYS "365"
        airflow variables set CLEANUP_OLD_REVIEWS "false"
        
        echo "âœ… Airflow initialization completed!"
    volumes:
      - ./backend/airflow/dags:/opt/airflow/dags
      - ./backend/airflow/plugins:/opt/airflow/plugins
      - ./backend/airflow/logs:/opt/airflow/logs
      - ./backend:/opt/airflow/backend
      - ./requirements.txt:/requirements.txt
      - ./.env:/opt/airflow/.env
    environment: &airflow-common-env
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg=}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=false
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW__LOGGING__LOGGING_LEVEL=INFO
      
      # Enterprise Configuration
      - AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL=30
      - AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT=false
      - AIRFLOW__CORE__PARALLELISM=8
      - AIRFLOW__CORE__DAG_CONCURRENCY=4
      - AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG=1
      
      # Application Environment Variables
      - DATABASE_URL=${DATABASE_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - PROXY_ENABLED=${PROXY_ENABLED:-false}
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      
      # Notification Configuration
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
      - TELEGRAM_ALERTS_ENABLED=${TELEGRAM_ALERTS_ENABLED:-false}
      - SLACK_ALERTS_ENABLED=${SLACK_ALERTS_ENABLED:-false}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network

  airflow_scheduler:
    image: apache/airflow:2.7.1
    container_name: airflow_scheduler
    command: scheduler
    volumes:
      - ./backend/airflow/dags:/opt/airflow/dags
      - ./backend/airflow/plugins:/opt/airflow/plugins
      - ./backend/airflow/logs:/opt/airflow/logs
      - ./backend:/opt/airflow/backend
      - ./requirements.txt:/requirements.txt
      - ./.env:/opt/airflow/.env
    environment: *airflow-common-env
    depends_on:
      postgres:
        condition: service_healthy
      airflow_init:
        condition: service_completed_successfully
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5

  airflow_webserver:
    image: apache/airflow:2.7.1
    container_name: airflow_webserver
    command: webserver
    volumes:
      - ./backend/airflow/dags:/opt/airflow/dags
      - ./backend/airflow/plugins:/opt/airflow/plugins
      - ./backend/airflow/logs:/opt/airflow/logs
      - ./backend:/opt/airflow/backend
      - ./requirements.txt:/requirements.txt
      - ./.env:/opt/airflow/.env
    ports:
      - "8080:8080"
    environment: *airflow-common-env
    depends_on:
      postgres:
        condition: service_healthy
      airflow_init:
        condition: service_completed_successfully
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Remove airflow_worker since we're using LocalExecutor, not CeleryExecutor

  # mlflow:
  #   image: python:3.9-slim
  #   container_name: mlflow
  #   volumes:
  #     - .:/app
  #     - ./mlflow_data:/mlflow_data
  #   working_dir: /app
  #   command: sh -c "
  #     pip install --no-cache-dir mlflow psycopg2-binary &&
  #     mlflow server 
  #       --host 0.0.0.0 
  #       --port 5001 
  #       --backend-store-uri postgresql://airflow:airflow@postgres:5432/airflow
  #       --default-artifact-root /mlflow_data/artifacts
  #     "
  #   ports:
  #     - "5001:5001"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - app_network
  #   restart: unless-stopped

  mlflow:
    image: python:3.9-slim
    container_name: mlflow
    volumes:
      - ./mlflow_data:/mlflow_data
      - ./data/mlflow:/data/mlflow
    working_dir: /mlflow_data
    command: sh -c "
      mkdir -p /data/mlflow &&
      mkdir -p /mlflow_data/artifacts &&
      mkdir -p /mlflow_data/models &&
      pip install --no-cache-dir mlflow &&
      mlflow server 
        --host 0.0.0.0 
        --port 5001 
        --backend-store-uri sqlite:////data/mlflow/mlflow.db
        --default-artifact-root /mlflow_data/artifacts
        --serve-artifacts
      "
    ports:
      - "5001:5001"
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:5001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      # Set MLflow environment variables for consistency
      - MLFLOW_BACKEND_STORE_URI=sqlite:////data/mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow_data/artifacts

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./infrastructure/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./infrastructure/grafana/dashboards:/etc/grafana/dashboards
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - app_network
    restart: unless-stopped

  postgres:
    image: postgres:13
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      POSTGRES_MULTIPLE_DATABASES: airflow,sentiment_db
    ports:
      - "5432:5432"
    networks:
      - app_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./infrastructure/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Remove Redis since we're using LocalExecutor

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  mlflow_data:

# version: '3.8'

# services:
#   backend:
#     # Instead of building, use a Python image directly
#     image: python:3.9-slim
#     container_name: backend
#     volumes:
#       - .:/app
#     working_dir: /app
#     command: sh -c "pip install -r requirements.txt && python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000"
#     ports:
#       - "8000:8000"
#     environment:
#       - DATABASE_URL=${DATABASE_URL}
#       - SENTRY_DSN=${SENTRY_DSN}
#     depends_on:
#       - postgres
#     networks:
#       - app_network

#   airflow_scheduler:
#     # Use image directly instead of building
#     image: apache/airflow:2.7.1
#     container_name: airflow_scheduler
#     command: scheduler
#     volumes:
#       - ./backend/airflow/dags:/opt/airflow/dags
#       - ./backend/airflow/plugins:/opt/airflow/plugins
#       - ./requirements.txt:/requirements.txt
#     environment:
#       - AIRFLOW__CORE__EXECUTOR=LocalExecutor
#       - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
#       - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
#       - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
#       - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
#       - SMTP_HOST=${SMTP_HOST}
#       - SMTP_USER=${SMTP_USER}
#       - SMTP_PASS=${SMTP_PASS}
#       - EMAIL_FROM=${EMAIL_FROM}
#     depends_on:
#       - postgres
#     networks:
#       - app_network

#   airflow_webserver:
#     image: apache/airflow:2.7.1
#     container_name: airflow_webserver
#     command: webserver
#     volumes:
#       - ./backend/airflow/dags:/opt/airflow/dags
#       - ./backend/airflow/plugins:/opt/airflow/plugins
#       - ./requirements.txt:/requirements.txt
#     ports:
#       - "8080:8080"
#     environment:
#       - AIRFLOW__CORE__EXECUTOR=LocalExecutor
#       - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
#       - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
#       - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
#       - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
#       - SMTP_HOST=${SMTP_HOST}
#       - SMTP_USER=${SMTP_USER}
#       - SMTP_PASS=${SMTP_PASS}
#       - EMAIL_FROM=${EMAIL_FROM}
#     depends_on:
#       - postgres
#     networks:
#       - app_network

#   airflow_worker:
#     # Use image directly instead of building
#     image: apache/airflow:2.7.1
#     container_name: airflow_worker
#     command: celery worker
#     volumes:
#       - ./backend/airflow/dags:/opt/airflow/dags
#       - ./backend/airflow/plugins:/opt/airflow/plugins
#       - ./requirements.txt:/requirements.txt
#     environment:
#       - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
#       - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
#       - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
#       - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
#       - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
#       - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
#       - SMTP_HOST=${SMTP_HOST}
#       - SMTP_USER=${SMTP_USER}
#       - SMTP_PASS=${SMTP_PASS}
#       - EMAIL_FROM=${EMAIL_FROM}
#     depends_on:
#       - postgres
#       - redis
#     networks:
#       - app_network

#   mlflow:
#     # Use Python image directly instead of building
#     image: python:3.9-slim
#     container_name: mlflow
#     volumes:
#       - .:/app
#     working_dir: /app
#     command: sh -c "pip install mlflow && mlflow server --host 0.0.0.0 --port 5001"
#     ports:
#       - "5001:5001"
#     networks:
#       - app_network

#   prometheus:
#     image: prom/prometheus
#     container_name: prometheus
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./backend/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#     networks:
#       - app_network

#   grafana:
#     image: grafana/grafana
#     container_name: grafana
#     ports:
#       - "3000:3000"
#     volumes:
#       - ./backend/monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
#       - ./backend/monitoring/grafana/dashboards:/etc/grafana/dashboards
#       - ./backend/monitoring/grafana/provisioning:/etc/grafana/provisioning
#     networks:
#       - app_network

#   postgres:
#     image: postgres:13
#     container_name: postgres
#     restart: always
#     environment:
#       POSTGRES_USER: airflow
#       POSTGRES_PASSWORD: airflow
#       POSTGRES_DB: airflow
#     ports:
#       - "5432:5432"
#     networks:
#       - app_network
#     volumes:
#       - postgres_data:/var/lib/postgresql/data

#   redis:
#     image: redis:latest
#     container_name: redis
#     networks:
#       - app_network

# networks:
#   app_network:
#     driver: bridge

# volumes:
#   postgres_data:
