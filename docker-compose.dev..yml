# docker-compose.dev.yml
version: '3.8'

services:
  # Frontend - Next.js Application (Development Mode)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8000
        - NEXT_PUBLIC_APP_ENV=development
    container_name: sentiment_frontend_dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_ENV=development
      - NEXT_PUBLIC_AIRFLOW_URL=http://localhost:8080
      - NEXT_PUBLIC_GRAFANA_URL=http://localhost:3001
    volumes:
      # Development: mount source code for hot reload
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"  # Direct access for development
    networks:
      - app_network
    command: npm run dev  # Development server with hot reload

  # NO NGINX in development - direct access to services
  
  backend:
    image: python:3.9-slim
    container_name: sentiment_backend_dev
    volumes:
      - .:/app
      - ./logs:/app/logs
    working_dir: /app
    command: sh -c "
      pip install --no-cache-dir -r requirements.txt && 
      python -c 'import asyncio; from backend.database.migration_runner import run_migrations; asyncio.run(run_migrations())' &&
      python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload
      "
    ports:
      - "8000:8000"  # Direct access for development
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - ENVIRONMENT=development
      - PROXY_ENABLED=false
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      # CORS configuration for development
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:13
    container_name: sentiment_postgres_dev
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      POSTGRES_MULTIPLE_DATABASES: airflow,sentiment_db
    ports:
      - "5432:5432"
    networks:
      - app_network
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  airflow_standalone:
    build:
      context: .
      dockerfile: docker/Dockerfile.airflow
    container_name: sentiment_airflow_dev
    command: standalone
    volumes:
      - ./backend/airflow/dags:/opt/airflow/dags
      - ./backend/airflow/plugins:/opt/airflow/plugins
      - ./backend/airflow/logs:/opt/airflow/logs
      - ./backend:/opt/airflow/backend
      - airflow_data_dev:/opt/airflow
    ports:
      - "8080:8080"  # Direct access for development
      - "8793:8793"
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=false
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__EXPOSE_CONFIG=true
      - AIRFLOW__LOGGING__LOGGING_LEVEL=DEBUG
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_WEBSERVER_SECRET_KEY:-changeme}
      - AIRFLOW__WEBSERVER__LOG_SERVE_HOST=0.0.0.0
      - AIRFLOW__WEBSERVER__LOG_SERVE_PORT=8793
      - AIRFLOW__LOGGING__BASE_LOG_FOLDER=/opt/airflow/logs
      - PYTHONPATH=/opt/airflow:/opt/airflow/backend
      - DATABASE_URL=${DATABASE_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - ENVIRONMENT=development
    networks:
      - app_network
    restart: unless-stopped

  mlflow:
    image: python:3.9-slim
    container_name: sentiment_mlflow_dev
    volumes:
      - ./mlflow_data:/mlflow_data
      - ./data/mlflow:/data/mlflow
    working_dir: /mlflow_data
    command: sh -c "
      mkdir -p /data/mlflow &&
      mkdir -p /mlflow_data/artifacts &&
      mkdir -p /mlflow_data/models &&
      pip install --no-cache-dir mlflow &&
      mlflow server 
        --host 0.0.0.0 
        --port 5001 
        --backend-store-uri sqlite:////data/mlflow/mlflow.db
        --default-artifact-root /mlflow_data/artifacts
        --serve-artifacts
      "
    ports:
      - "5001:5001"  # Direct access for development
    networks:
      - app_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: sentiment_grafana_dev
    ports:
      - "3001:3000"  # Direct access for development
    volumes:
      - ./infrastructure/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./infrastructure/grafana/dashboards:/etc/grafana/dashboards
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data_dev:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      # No sub-path for development
      - GF_SERVER_ROOT_URL=http://localhost:3001/
    networks:
      - app_network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: sentiment_prometheus_dev
    ports:
      - "9090:9090"  # Direct access for development
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_dev:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app_network
    restart: unless-stopped

volumes:
  postgres_data_dev:
  prometheus_data_dev:
  grafana_data_dev:
  mlflow_data_dev:
  airflow_data_dev:

networks:
  app_network:
    driver: bridge