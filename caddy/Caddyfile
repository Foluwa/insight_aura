{
    email {env.EMAIL}
    auto_https disable_redirects
}

# Shared configuration for all domains
(common_config) {
    tls {
        dns duckdns {env.DUCKDNS_TOKEN}
    }
    encode gzip zstd
    log {
        output file /var/log/caddy/{args.0}.log
        format json
    }
}

# Main domain - Frontend
insightaura.duckdns.org {
    import common_config "main"

    # Critical headers for all responses
    header {
        # Security headers
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        Referrer-Policy "strict-origin-when-cross-origin"
        
        # Cache control for static assets
        Cache-Control "public, max-age=31536000, immutable" {
            /_next/static/*
            /static/*
            /fonts/*
            /images/*
        }
        
        # CORS for fonts and assets
        Access-Control-Allow-Origin "*" {
            /_next/static/media/*
            /fonts/*
        }
    }

    # Next.js static assets - priority route
    handle /_next/* {
        # Explicit MIME type overrides
        @css path *.css
        @js path *.js
        @fonts path *.woff2
        @images path *.svg *.png *.jpg *.webp
        
        handle @css {
            header Content-Type text/css
            reverse_proxy frontend:3000
        }
        
        handle @fonts {
            header Content-Type font/woff2
            reverse_proxy frontend:3000
        }
        
        handle @images {
            header Content-Type image/{path.extension}
            reverse_proxy frontend:3000
        }
        
        handle @js {
            header Content-Type application/javascript
            reverse_proxy frontend:3000
        }
        
        # Fallback for other _next files
        handle {
            reverse_proxy frontend:3000 {
                header_up Host {host}
                header_up X-Forwarded-Proto https
            }
        }
    }

    # Static files from public folder
    handle /static/* {
        header Content-Type {http.reverse_proxy.header.Content-Type}
        reverse_proxy frontend:3000 {
            header_up Host {host}
            header_up X-Forwarded-Proto https
        }
    }

    # API proxy
    handle /api/* {
        reverse_proxy backend:8000 {
            header_up Host {host}
            header_up X-Forwarded-Proto https
        }
    }

    # Health checks
    handle /health {
        reverse_proxy frontend:3000 {
            header_up Host {host}
            header_up X-Forwarded-Proto https
        }
    }

    # All other requests
    handle {
        reverse_proxy frontend:3000 {
            header_up Host {host}
            header_up X-Forwarded-Proto https
            
            # Required for Next.js HMR in development
            header_up Connection "upgrade"
            header_up Upgrade $http_upgrade
        }
    }
}

# API 
api.insightaura.duckdns.org {
    import common_config "api"
    
    # Reverse proxy to backend
    reverse_proxy backend:8000 {
        header_up Host {host}
        header_up X-Forwarded-Proto https
    }
}

# Airflow 
airflow.insightaura.duckdns.org {
    import common_config "airflow"

    # Reverse proxy with startup tolerance and security headers
    reverse_proxy {
        to airflow_standalone:8080
        transport http {
            tls_insecure_skip_verify  
        }
        
        # Headers for proper URL generation
        header_up Host {host}
        header_up X-Forwarded-Proto https
        header_up X-Forwarded-Host {host}
        header_up X-Real-IP {remote}
        
        # Extended timeout for initial Airflow startup
        try_duration 120s
        flush_interval -1
    }

    # Handle websocket connections
    @websockets {
        header Connection *Upgrade*
        header Upgrade    websocket
    }
    handle @websockets {
        reverse_proxy airflow_standalone:8080 {
            transport http {
                tls_insecure_skip_verify
            }
        }
    }
}

# Grafana 
grafana.insightaura.duckdns.org {
    import common_config "grafana"
    
    # Add these headers specifically for Grafana
    reverse_proxy grafana:3001 {
        header_up Host {host}
        header_up X-Forwarded-Proto https
        header_up X-Forwarded-Host {host}
        header_up X-Forwarded-For {remote}
        header_up X-Real-IP {remote}
    }
}

# MLflow 
mlflow.insightaura.duckdns.org {
    import common_config "mlflow"
    reverse_proxy mlflow:5001 {
        header_up Host {host}
        header_up X-Forwarded-Proto https
    }
}

# Prometheus 
prometheus.insightaura.duckdns.org {
    import common_config "prometheus"
    
    # Reverse proxy to Prometheus
    reverse_proxy prometheus:9090 {
        header_up Host {host}
        header_up X-Forwarded-Proto https
    }
}